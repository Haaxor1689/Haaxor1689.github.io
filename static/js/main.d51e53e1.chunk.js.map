{"version":3,"sources":["Assets/avatar.jpg","Components/Navigation.tsx","Components/SectionTitle.tsx","Components/Biography.tsx","Components/CompanyItem.tsx","Components/Experience.tsx","Components/Education.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Navigation","state","isOpen","show","width","_this","toggleNav","setState","prevState","Object","objectSpread","render","react_default","a","createElement","className","props","subtitle","Button","color","onClick","esm","handleWidth","resizableElementId","_ref","height","Collapse","Nav","vertical","NavLink","href","React","Component","SectionTitle","id","title","Biography","Col","SectionTitle_SectionTitle","src","Avatar","name","headline","summary","XompanyItem","getLogo","logo","concat","process","Media_default","left","url","alt","body","heading","Experience","renderBody","description","CompanyItem_XompanyItem","assign","company","Education","field","school","App","portfolio","PortfolioJSON","navOpen","showNav","Row","noGutters","sm","Navigation_Navigation","biography","Biography_Biography","lg","experience","map","ex","Experience_Experience","education","ed","Education_Education","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"68JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yWCOnBC,oNACjBC,MAAQ,CACJC,QAAQ,KAGJC,KAAO,SAACC,GACZ,OAAOA,EAAQ,KAAOC,EAAKJ,MAAMC,UAG7BI,UAAY,WAChBD,EAAKE,SAAS,SAACC,GAAD,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GACPD,EADO,CAEVN,QAASM,EAAUN,cAI3BS,OAAS,kBACLC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,aACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBV,EAAKW,MAAMC,WAEjDL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,MAAM,YAAYJ,UAAU,aAAaK,QAASf,EAAKC,WAA/D,QACAM,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAgBC,aAAW,EAACC,mBAAmB,OAAOZ,OAAQ,SAAAa,GAAA,IAAEpB,EAAFoB,EAAEpB,MAAFoB,EAASC,OAAT,OAC1Db,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAUxB,OAAQG,EAAKF,KAAKC,GAAQW,UAAU,cAC1CH,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKC,UAAQ,GACThB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAASC,KAAK,KAAd,QACAlB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAASC,KAAK,cAAd,aACAlB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAASC,KAAK,aAAd,iDA7BYC,IAAMC,YCJzBC,oNACjBtB,OAAS,kBACPC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBmB,GAAI7B,EAAKW,MAAMkB,IAC1CtB,EAAAC,EAAAC,cAAA,YAAOT,EAAKW,MAAMmB,OAClBvB,EAAAC,EAAAC,cAAA,0CAJgCiB,IAAMC,qCCM3BI,6MACjBzB,OAAS,kBACLC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACIzB,EAAAC,EAAAC,cAACwB,EAAD,CAAcH,MAAM,YAAYD,GAAG,cACnCtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKyB,IAAKC,IAAQzB,UAAU,qBAC5BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBV,EAAKW,MAAMyB,MAC7C7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBV,EAAKW,MAAM0B,WAEpD9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBV,EAAKW,MAAM2B,wCATpBZ,IAAMC,oCCCxBY,6MACTC,QAAU,kBAAexC,EAAKW,MAAM8B,KAAX,GAAAC,OAAqBC,GAArB,kBAAAD,OAA4D1C,EAAKW,MAAM8B,KAAvE,QAAoF,sCAErHnC,OAAS,kBACLC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CAAOE,UAAU,WACbH,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CAAOqC,MAAI,EAACpB,KAAMzB,EAAKW,MAAMmC,KACzBvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAewB,IAAKlC,EAAKwC,UAAWO,IAAI,mBAG/DxC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CAAOwC,MAAI,GACPzC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CAAOyC,SAAO,GAAEjD,EAAKW,MAAMyB,MAC1BpC,EAAKW,MAAMqC,qCAZatB,IAAMC,WCL1BuB,6MACjBC,WAAa,kBACT5C,EAAAC,EAAAC,cAAA,WACKT,EAAKW,MAAMyC,gBAIpB9C,OAAS,kBAAmBC,EAAAC,EAAAC,cAAC4C,EAADjD,OAAAkD,OAAA,GAAkBtD,EAAKW,MAAM4C,QAA7B,CAAuCP,KAAMhD,EAAKmD,8CAP1CzB,IAAMC,WCAzB6B,6MACjBL,WAAa,kBACT5C,EAAAC,EAAAC,cAAA,WACKT,EAAKW,MAAM8C,UAIpBnD,OAAS,kBAAmBC,EAAAC,EAAAC,cAAC4C,EAADjD,OAAAkD,OAAA,GAAkBtD,EAAKW,MAAM+C,OAA7B,CAAsCV,KAAMhD,EAAKmD,8CAP1CzB,IAAMC,WCYxBgC,6MACZ/D,MAAmB,CACxBgE,UAAWC,EACXC,SAAS,KAGHC,QAAU,WAChB,OAAO/D,EAAKJ,MAAMkE,WAGZ7D,UAAY,WAClBD,EAAKE,SAAS,SAACC,GAAD,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GACTD,EADS,CAEZ2D,SAAU3D,EAAU2D,eAIxBxD,OAAS,kBACPC,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKC,WAAS,GACZ1D,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAKkC,GAAG,OAAOxD,UAAU,cACvBH,EAAAC,EAAAC,cAAC0D,EAAD,CAAYvD,SAAUZ,EAAKJ,MAAMgE,UAAUQ,UAAUhC,QAEvD7B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAKkC,IAAE,GACL3D,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKtD,UAAU,WACbH,EAAAC,EAAAC,cAAC4D,EAAcrE,EAAKJ,MAAMgE,UAAUQ,YAEtC7D,EAAAC,EAAAC,cAACuD,EAAA,EAAD,KACEzD,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAKsC,GAAG,IAAI5D,UAAU,WACpBH,EAAAC,EAAAC,cAACwB,EAAD,CAAcH,MAAM,eACnB9B,EAAKJ,MAAMgE,UAAUW,WAAWC,IAAI,SAACC,GAAD,OAAQlE,EAAAC,EAAAC,cAACiE,EAAeD,MAE/DlE,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAKsC,GAAG,IAAI5D,UAAU,WACpBH,EAAAC,EAAAC,cAACwB,EAAD,CAAcH,MAAM,cACnB9B,EAAKJ,MAAMgE,UAAUe,UAAUH,IAAI,SAACI,GAAD,OAAQrE,EAAAC,EAAAC,cAACoE,EAAcD,wCAlCxClD,IAAMC,WCLnBmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAS7E,OAAOC,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d51e53e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.fe5d8070.jpg\";","import React from 'react';\r\nimport ResizeDetector from 'react-resize-detector';\r\nimport { Nav, NavLink, Collapse, Button, } from 'reactstrap';\r\n\r\nimport './Navigation.scss';\r\n\r\n\r\nexport default class Navigation extends React.Component<{ subtitle: string }, { isOpen: boolean }> {\r\n    state = {\r\n        isOpen: false,\r\n    }\r\n\r\n    private show = (width: number): boolean => {\r\n        return width > 576 || this.state.isOpen;\r\n    }\r\n\r\n    private toggleNav = () => {\r\n        this.setState((prevState) => ({\r\n            ...prevState,\r\n            isOpen: !prevState.isOpen,\r\n        }));\r\n    }\r\n\r\n    render = (): JSX.Element => (\r\n        <header>\r\n            <div className=\"sticky-top\">\r\n                <div className=\"header-brand\">\r\n                    <div className=\"header-title\">Portfolio</div>\r\n                    <div className=\"header-subtitle\">{this.props.subtitle}</div>\r\n                </div>\r\n                <Button color=\"secondary\" className=\"nav-button\" onClick={this.toggleNav}>Menu</Button>\r\n                <ResizeDetector handleWidth resizableElementId=\"root\" render={({width, height}) => (\r\n                    <Collapse isOpen={this.show(width)} className=\"header-nav\">\r\n                        <Nav vertical>\r\n                            <NavLink href=\"#\">Home</NavLink>\r\n                            <NavLink href=\"#biography\">Biography</NavLink>\r\n                            <NavLink href=\"#contacts\">Contacts</NavLink>\r\n                        </Nav>\r\n                    </Collapse>\r\n                )}>\r\n                </ResizeDetector>\r\n            </div>\r\n        </header>\r\n    );\r\n}","import React from 'react';\r\nimport './SectionTitle.scss'\r\n\r\nexport default class SectionTitle extends React.Component<{ title: string, id?: string }> {\r\n    render = (): JSX.Element => (\r\n      <div className=\"section-title\" id={this.props.id}>\r\n          <span>{this.props.title}</span>\r\n          <hr />\r\n      </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Col, } from 'reactstrap';\r\nimport SectionTitle from './SectionTitle';\r\nimport './Biography.scss'\r\n\r\nimport { IBiography } from \"./../Model/IPortfolio\"\r\n\r\nimport Avatar from \"./../Assets/avatar.jpg\"\r\n\r\nexport default class Biography extends React.Component<IBiography> {\r\n    render = (): JSX.Element => (\r\n        <Col>\r\n            <SectionTitle title=\"Biography\" id=\"biography\" />\r\n            <div className=\"biography\">\r\n                <img src={Avatar} className=\"biography-avatar\" />\r\n                <div className=\"biography-title\">{this.props.name}</div>\r\n                <div className=\"biography-headline\">{this.props.headline}</div>\r\n            </div>\r\n            <div className=\"biography-summary\">{this.props.summary}</div>\r\n        </Col>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './CompanyItem.scss';\r\n\r\nimport { ICompany } from '../Model/IPortfolio'\r\nimport Media from 'reactstrap/lib/Media';\r\n\r\ninterface ICompanyItemProps extends ICompany {\r\n    body: JSX.Element;\r\n}\r\n\r\nexport default class XompanyItem extends React.Component<ICompanyItemProps> {\r\n    private getLogo = (): string =>  this.props.logo ? `${process.env.PUBLIC_URL}/Assets/Logos/${this.props.logo}.png` : \"http://via.placeholder.com/60x60\";\r\n\r\n    render = (): JSX.Element => (\r\n        <Media className=\"company\">\r\n            <Media left href={this.props.url}>\r\n                <div className=\"company-logo-wrapper\">\r\n                    <img className=\"company-logo\" src={this.getLogo()} alt=\"Company logo\" />\r\n                </div>\r\n            </Media>\r\n            <Media body>\r\n                <Media heading>{this.props.name}</Media>\r\n                {this.props.body}\r\n            </Media>\r\n        </Media>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport CompanyItem from './CompanyItem';\r\n\r\nimport { IExperience } from './../Model/IPortfolio'\r\n\r\nexport default class Experience extends React.Component<IExperience> {\r\n    renderBody = (): JSX.Element => (\r\n        <div>\r\n            {this.props.description}\r\n        </div>\r\n    );\r\n\r\n    render = (): JSX.Element => <CompanyItem { ...this.props.company } body={this.renderBody()} />\r\n}\r\n","import React from 'react';\r\nimport CompanyItem from './CompanyItem';\r\n\r\nimport { IEducation } from './../Model/IPortfolio'\r\n\r\nexport default class Education extends React.Component<IEducation> {\r\n    renderBody = (): JSX.Element => (\r\n        <div>\r\n            {this.props.field}\r\n        </div>\r\n    );\r\n\r\n    render = (): JSX.Element => <CompanyItem { ...this.props.school } body={this.renderBody()} />\r\n}\r\n","import React from 'react';\nimport { Row, Col, Nav, NavLink, Collapse, Button, } from 'reactstrap';\n\nimport { IPortfolio } from \"./../Model/IPortfolio\"\nimport PortfolioJSON from \"./../Data/portfolio.json\"\n\nimport Navigation from './Navigation';\nimport Biography from './Biography';\nimport Experience from './Experience';\nimport Education from './Education';\nimport SectionTitle from './SectionTitle';\n\ninterface IAppState {\n  portfolio: IPortfolio;\n  navOpen: boolean;\n}\n\nexport default class App extends React.Component<{}, IAppState> {\n  public state: IAppState = {\n    portfolio: PortfolioJSON,\n    navOpen: true,\n  };\n\n  private showNav = (): boolean => {\n    return this.state.navOpen;\n  }\n\n  private toggleNav = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      navOpen: !prevState.navOpen,\n    }));\n  }\n\n  render = (): JSX.Element => (\n    <Row noGutters>\n      <Col sm=\"auto\" className=\"sticky-top\">\n        <Navigation subtitle={this.state.portfolio.biography.name} />\n      </Col>\n      <Col sm>\n        <main>\n          <Row className=\"section\">\n            <Biography {...this.state.portfolio.biography} />\n          </Row>\n          <Row>\n            <Col lg=\"6\" className=\"section\">\n              <SectionTitle title=\"Experience\"/>\n              {this.state.portfolio.experience.map((ex) => <Experience {...ex} />)}\n            </Col>\n            <Col lg=\"6\" className=\"section\">\n              <SectionTitle title=\"Education\"/>\n              {this.state.portfolio.education.map((ed) => <Education {...ed} />)}\n            </Col>\n          </Row>\n        </main>\n      </Col>\n    </Row>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}